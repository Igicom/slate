<% heading 'Organize' %>
<% head javascript_include_tag('jquery.highlightFade.js') %>
<% head javascript_include_tag('jquery.hotkeys.js') %>

<ul id="pages">
  <%= render :partial => 'branch', :collection => resource.children %>
</ul>

<% form_tag remap_resources_path, :method => :put, :id => 'remap' do %>
  <div class="actions">
    <%= hidden_field_tag 'mappings' %>
    <%= submit_tag 'Save' %>
  </div>
<% end %>

<style type="text/css" media="screen">
  div.to-actions {
    display: inline;
  }

  div.to-actions a {
    font-size: 0.9em;
    color: #777;
    padding: 4px;
    text-decoration: none;
  }
  
  #pages li {
    padding: 3px;
  }
  
  li span.name {
    padding: 3px;
  }
  
  li span.active {
    background: #cedeef;
    xborder: dotted 1px #369;
  }
</style>

<script type="text/javascript" charset="utf-8">
  function TreeOrganizer(dom_id, root_id) {
    this.leaf = null;
    this.branch = null;
    this.dom_id = dom_id;
    this.root_id = root_id ? root_id : 0;
    this.root = $('#' + this.dom_id);
    // use this template once we have the images
    //this.template = '<a href="#" onclick="NAME.ACTION(this); return false;" class="to-ACTION"><img src="/images/glyphs/ACTION.png" alt="TEXT" /></a>';
    this.template = '<a href="#" onclick="NAME.ACTION(this); return false;" class="to-ACTION">TEXT</a>';
    return this;
  } // end PageOrganizer
  
  TreeOrganizer.prototype = {
    extractNode: function(node) {
      if ($(node)[0].tagName == 'LI') {
        this.leaf = $(node);
      } else {  
        this.leaf = $(node).parents('li:first');
      }
      
      this.branch = this.leaf.parents('ul:first');
    }
    ,
    isRoot: function(branch) {
      return $(branch).attr('id') == this.dom_id; 
    }
    ,
    animate: function() {
      this.leaf.highlightFade({interval: 10, speed: 600, start: '#eee'});
    }
    ,
    moveTop: function(node) {
      this.extractNode(node);
      this.branch.prepend(this.leaf);
      this.animate();
    }
    ,
    moveBottom: function(node) {
      this.extractNode(node);
      this.branch.append(this.leaf);
      this.animate();
    }
    ,
    moveUp: function(node) {
      this.extractNode(node);
      this.leaf.prev().before(this.leaf);
      this.animate();
    }
    ,
    moveDown: function(node) {
      this.extractNode(node);
      this.leaf.next().after(this.leaf);
      this.animate();
    }
    ,
    moveLeft: function(node) {
      this.extractNode(node);
      
      if (this.isRoot(this.branch)) return;
      
      this.branch.parents('li:first').after(this.leaf);
      this.animate();
    }
    ,
    moveRight: function(node) {
      this.extractNode(node);
      
      this.branch = this.leaf.prev().children('ul:first');
      
      if (this.branch.length == 0) return;
      
      this.branch.append(this.leaf);
      this.animate();
    }
    ,
    promote: function(node) {
      this.moveLeft(node);
    }
    ,
    demote: function(node) {
      this.moveRight(node);
    }
    ,
    linkTo: function(varname, action) {
      return this.template.replace(new RegExp('NAME', 'g'), varname).
        replace(new RegExp('ACTION', 'g'), action).
        replace(new RegExp('TEXT', 'g'), this.actionText(action));
    }
    ,
    actionText: function(action) {
      switch(action) {
        case 'moveTop':     return '&uArr;'; // Move to top';
        case 'moveBottom':  return '&dArr;'; // Move to bottom ';
        case 'moveUp':      return '&uarr;'; // Move up';
        case 'moveDown':    return '&darr;'; // Move down';
        case 'moveLeft':    return '&larr;'; // Move left';
        case 'moveRight':   return '&rarr;'; // Move right ';
        default:            return action;
      }
    }
    ,
    actionLinks: function(varname) {
      return this.linkTo(varname, 'moveTop')    
           + this.linkTo(varname, 'moveUp')       
           + this.linkTo(varname, 'moveDown')     
           + this.linkTo(varname, 'moveBottom')   
           + this.linkTo(varname, 'moveLeft')     
           + this.linkTo(varname, 'moveRight')   
    }
    ,
    extractID: function(node) {
      var id = node.id.match(/\d+$/);
      return (id ? id[0] : node.id);
    }
    ,
    mappings: function() {
      return this._mappings($('#' + this.dom_id), this.root_id); 
    }
    ,
    _mappings: function(parent, parentID) {
      var mappings = [];
      var childID  = null;
      var mapper = this;
      
      $.each($(parent).children('li'), function(index, child) {
        childID = mapper.extractID(child);  
        mappings.push(childID + '-' + parentID);
        mappings = mappings.concat(mapper._mappings($(child).children('ul'), childID));
      });
      return mappings;
    }
    ,
    installHotkeys: function() {
      var mapper = this;
      this.activeLeaf = null;
      
      this.activateLeaf(this.root.children('li:first'));

      $.hotkeys.add('Right', function() {
        mapper.activateRelativeLeaf(1);
      });

      $.hotkeys.add('Left', function() {
        mapper.activateRelativeLeaf(-1);
      });
      
      $.hotkeys.add('Down', function() {
        mapper.activateRelativeLeaf(1);
      });

      $.hotkeys.add('Up', function() {
        mapper.activateRelativeLeaf(-1);
      });
      
      $.hotkeys.add('Shift+Down', function() {
        mapper.moveDown(mapper.activeLeaf);
      });

      $.hotkeys.add('Shift+Up', function() {
        mapper.moveUp(mapper.activeLeaf);
      });

      $.hotkeys.add('Shift+Left', function() {
        mapper.moveLeft(mapper.activeLeaf);
      });
      
      $.hotkeys.add('Shift+Right', function() {
        mapper.moveRight(mapper.activeLeaf);
      });

      // Not sure about these yet
      // $.hotkeys.add('Alt+Up', function() {
      //   mapper.moveTop(mapper.activeLeaf);
      // });
      // 
      // $.hotkeys.add('Alt+Down', function() {
      //   mapper.moveBottom(mapper.activeLeaf);
      // });
    }
    ,
    activateLeaf: function(leaf) {
      leaf = $(leaf);
      if (leaf.length == 0) return;
      if (leaf[0].tagName != 'LI') return;
      
      if (this.activeLeaf) $(this.activeLeaf).children('span.name:first').removeClass('active');
      
      this.activeLeaf = leaf;
      this.activeLeaf.children('span.name:first').addClass('active');
      return this.activeLeaf;
    }
    ,
    activateRelativeLeaf: function(offset) {
      var child = null;
      var leaf = $(this.activeLeaf);
      
      if (offset == 1) {
        child = leaf.find('ul li:first');
        
        if (child.length == 0) child = leaf.next();
        
        if (child.length == 0) {
          //var c = 10;
          child = leaf.parent().parent();
          while(child.next().length == 0) {
            child = child.parent().parent();
          } // end if
          
          child = child.next();
        }
      } else if (offset == -1) {
        child = leaf.prev().find('ul li:last');
        
        if (child.length == 0) child = leaf.prev();
        if (child.length == 0) child = leaf.parent().parent();
      }

      this.activateLeaf(child);
    }
    ,
    storeMappings: function(dom_id) {
      var element = $('#' + dom_id);
      if (element.length > 0) {
        return element[0].value = this.mappings().join(',');
      } // end if 
    }
  } // end 

  $(function() {
    organizer = new TreeOrganizer('pages', <%= resource.id %>);

    $('#pages li').click(function(event) {
      organizer.activateLeaf(this);
      return false;
    }).children('div.to-actions').html(
      organizer.actionLinks('organizer')
    );
    
    // install keyboard shortcuts
    organizer.installHotkeys();
    
    // hook into form
    $('#remap').submit(function() {
      organizer.storeMappings('mappings');
    });
  });
</script>